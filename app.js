// app.js
// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´ =====
const CONFIG = {
    TOTAL_STAGES: 10,
    INITIAL_TIME: 45 * 60, // 45 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    MAX_HINTS: 5, // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫
    MAX_SKIPS: 1,
    MAX_LIVES: 3,
    DAILY_BONUS: 100
};

// ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò–ì–†–´ =====
let tg = null;
let gameState = {
    currentStage: 1,
    score: 0,
    timeLeft: CONFIG.INITIAL_TIME,
    timerInterval: null,
    isGameActive: false,
    hintsUsed: 0,
    skipsUsed: 0,
    lives: CONFIG.MAX_LIVES,
    startTime: null,
    playerName: '–§–µ—Ä–º–µ—Ä',
    playerEmoji: 'üë®‚Äçüåæ'
};

// ===== –î–ê–ù–ù–´–ï –≠–¢–ê–ü–û–í =====
const stages = {
    1: {
        title: "ü•ö –≠–¢–ê–ü 1: –¢–ê–ô–ù–ê –Ø–ò–¶",
        description: "–ö–æ–Ω—é—Ö –Ω–∞–∫–æ—Ä–º–∏–ª –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–Ω—ã–º –∫–æ—Ä–º–æ–º. –ü—Ä–æ–π–¥–∏—Ç–µ –≤ –∫–∞—Ä–µ—Ç–Ω—ã–π –¥–≤–æ—Ä. –û—Ç–≥–∞–¥–∞–π —á—å–µ —è–π—Ü–æ, —Ä–∞—Å–ø–æ–ª–æ–∂–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç –±–æ–ª—å—à–µ–π –ø—Ç–∏—Ü—ã –∫ –º–µ–Ω—å—à–µ–π.",
        task: "üîç –†–∞—Å–ø–æ–ª–æ–∂–∏ —è–π—Ü–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç –±–æ–ª—å—à–µ–π –ø—Ç–∏—Ü—ã –∫ –º–µ–Ω—å—à–µ–π",
        hint: "üí° –ü—Ç–∏—Ü—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É: —Å—Ç—Ä–∞—É—Å > –≥—É—Å—å > –∫—É—Ä–∏—Ü–∞ > —Ü–µ—Å–∞—Ä–∫–∞",
        joke: "üêî –ü–æ—á–µ–º—É –∫—É—Ä–∏—Ü–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É? –ß—Ç–æ–±—ã –Ω–µ —Å—Ç–∞—Ç—å –∑–æ–º–±–∏-–∫—É—Ä–∏—Ü–µ–π! üßü‚Äç‚ôÇÔ∏è",
        fact: "üêî –°—Ç—Ä–∞—É—Å–∏–Ω–æ–µ —è–π—Ü–æ - —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –≤ –º–∏—Ä–µ –∏ –º–æ–∂–µ—Ç –≤–µ—Å–∏—Ç—å –¥–æ 2 –∫–≥!",
        answer: "2314",
        points: 100,
        difficulty: "easy",
        timeBonus: 50
    },
    2: {
        title: "ü¶¢ –≠–¢–ê–ü 2: –î–û–ë–†–´–ï –ì–£–°–ò",
        description: "–í –ú–∞—Ä—å–∏–Ω–æ –Ω–∞—à–∏ –≥—É—Å–∏ –æ—á–µ–Ω—å –¥–æ–±—Ä—ã–µ! –°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –Ω–∞—à–∏–º–∏ –¥–æ–±—Ä—ã–º–∏ –≥—É—Å—è–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ –Ω–æ–º–µ—Ä +79817208061",
        task: "üì∏ –°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –≥—É—Å—è–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ –Ω–æ–º–µ—Ä +79817208061",
        hint: "üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–ª—Ñ–∏ –ø–æ–ª—É—á–∏ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
        joke: "ü¶¢ –ì—É—Å—å –≥–æ–≤–æ—Ä–∏—Ç: '–Ø –Ω–µ –∑–æ–º–±–∏, —è –ø—Ä–æ—Å—Ç–æ –æ—á–µ–Ω—å –ø—Ä–µ–¥–∞–Ω–Ω—ã–π!' üßü‚Äç‚ôÄÔ∏è",
        fact: "ü¶¢ –ì—É—Å–∏ –º–æ–≥—É—Ç –ª–µ—Ç–∞—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç–µ –¥–æ 8 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏!",
        answer: "–°–ï–õ–§–ò",
        points: 150,
        difficulty: "easy",
        timeBonus: 75
    },
    3: {
        title: "ü¶ô –≠–¢–ê–ü 3: –¢–ê–ö–¢–ò–õ–¨–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í",
        description: "–ê–ª—å–ø–∞–∫–∏ —Å–ª–∞–≤—è—Ç—Å—è —Å–≤–æ–µ–π —Ä–æ—Å–∫–æ—à–Ω–æ–π —à–µ—Ä—Å—Ç—å—é! –û–Ω–∞ —Ü–µ–Ω–∏—Ç—Å—è –≤–æ –≤—Å–µ–º –º–∏—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞! –° –∑–∞–≤—è–∑–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–æ—Ç –º–µ—à–æ—á–µ–∫, –≥–¥–µ —Å–ø—Ä—è—Ç–∞–Ω–∞ —à–µ—Ä—Å—Ç—å –∞–ª—å–ø–∞–∫–∏.",
        task: "üîç –ù–∞ –æ—â—É–ø—å –æ–ø—Ä–µ–¥–µ–ª–∏, –≤ –∫–∞–∫–æ–º –º–µ—à–æ—á–∫–µ —à–µ—Ä—Å—Ç—å –∞–ª—å–ø–∞–∫–∏",
        hint: "üí° –®–µ—Ä—Å—Ç—å –∞–ª—å–ø–∞–∫–∏ –æ—á–µ–Ω—å –º—è–≥–∫–∞—è –∏ –Ω–µ–∂–Ω–∞—è, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≥—Ä—É–±–æ–π –æ–≤–µ—á—å–µ–π —à–µ—Ä—Å—Ç–∏",
        joke: "ü¶ô –ê–ª—å–ø–∞–∫–∞ —à–µ–ø—á–µ—Ç: '–ú–æ—è —à–µ—Ä—Å—Ç—å —Ç–∞–∫–∞—è –º—è–≥–∫–∞—è, —á—Ç–æ –¥–∞–∂–µ –∑–æ–º–±–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ–±—Ä—ã–º–∏!' üßü‚Äç‚ôÇÔ∏è‚ù§Ô∏è",
        fact: "ü¶ô –®–µ—Ä—Å—Ç—å –∞–ª—å–ø–∞–∫–∏ –≤ 7 —Ä–∞–∑ —Ç–µ–ø–ª–µ–µ –æ–≤–µ—á—å–µ–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∞–Ω–æ–ª–∏–Ω–∞!",
        answer: "3",
        points: 200,
        difficulty: "medium",
        timeBonus: 100
    },
    4: {
        title: "üêï –≠–¢–ê–ü 4: –í–ï–°–ï–õ–´–ï –°–û–ë–ê–ö–ò",
        description: "–ù–∞ —Ñ–µ—Ä–º–µ –∂–∏–≤—É—Ç –≤–µ—Å–µ–ª—ã–µ —Å–æ–±–∞–∫–∏! –ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å –¥–æ –≤–æ–ª—å–µ—Ä–∞ —Å —Å–æ–±–∞–∫–∞–º–∏ - —ç—Ç–∏ —Å–æ–±–∞–∫–∏ –µ—Å—Ç—å –Ω–∞ —Ñ–µ—Ä–º–µ –∏ –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –º–æ–∂–µ—Ç –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è –¥–æ –Ω–∏—Ö.",
        task: "üîç –ù–∞–π–¥–∏—Ç–µ –≤–æ–ª—å–µ—Ä —Å —Å–æ–±–∞–∫–∞–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥",
        hint: "üí° –ö–æ–¥ —Å–≤—è–∑–∞–Ω —Å –Ω–∞—à–∏–º–∏ –≤–µ—Ä–Ω—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏",
        joke: "üêï –°–æ–±–∞–∫–∞ –¥—É–º–∞–µ—Ç: '–Ø –±—ã –ø–æ–≥–Ω–∞–ª—Å—è –∑–∞ –∑–æ–º–±–∏-–∫–æ—Å—Ç—è–º–∏, –Ω–æ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –≤–æ–Ω—è—é—Ç!' ü¶¥üßü‚Äç‚ôÇÔ∏è",
        fact: "üêï –°–æ–±–∞–∫–∏ –º–æ–≥—É—Ç –ø–æ–Ω–∏–º–∞—Ç—å –¥–æ 250 —Å–ª–æ–≤ –∏ –∂–µ—Å—Ç–æ–≤!",
        answer: "–°–û–ë–ê–ö–ò",
        points: 250,
        difficulty: "easy",
        timeBonus: 125
    },
    5: {
        title: "üêÑ –≠–¢–ê–ü 5: –†–ê–î–£–ñ–ù–û–ï –ú–û–õ–û–ö–û",
        description: "–í –º–æ–ª–æ—á–Ω–æ–º —Ü–µ—Ö—É –ø–æ—è–≤–∏–ª–æ—Å—å –º–æ–ª–æ–∫–æ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤. –ù–∞–π–¥–∏—Ç–µ –ª–æ–≥–∏–∫—É –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –±—É—Ç—ã–ª–æ–∫. –†–∞—Å—Å—Ç–∞–≤–∏–≤ –±—É—Ç—ã–ª–∫–∏ –ø–æ —Ü–≤–µ—Ç–∞–º —Ä–∞–¥—É–≥–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ.",
        task: "üé® –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –±—É—Ç—ã–ª–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏ –∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–ª–æ–≤–æ",
        hint: "üí° –¶–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏: –∫—Ä–∞—Å–Ω—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∂–µ–ª—Ç—ã–π, –∑–µ–ª–µ–Ω—ã–π, –≥–æ–ª—É–±–æ–π, —Å–∏–Ω–∏–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π",
        joke: "üêÑ –ö–æ—Ä–æ–≤–∞ —à—É—Ç–∏—Ç: '–ú–æ–µ –º–æ–ª–æ–∫–æ —Ç–µ–ø–µ—Ä—å –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏, –∫—Ä–æ–º–µ –∑–æ–º–±–∏-–∑–µ–ª–µ–Ω–æ–≥–æ!' üåàüßü‚Äç‚ôÇÔ∏è",
        fact: "üêÑ –ö–æ—Ä–æ–≤–∞ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –¥–æ 25 –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ–∫–∞ –≤ –¥–µ–Ω—å!",
        answer: "–ö–û–ù–¨",
        points: 300,
        difficulty: "medium",
        timeBonus: 150
    },
    6: {
        title: "üêë –≠–¢–ê–ü 6: –û–í–ï–ß–¨–ï –°–¢–ê–î–û",
        description: "–û–≤—Ü—ã —Å—Ç–∞–ª–∏ –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ. –ò—Ö –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å. –£ –≤–∞—Å –µ—Å—Ç—å 5 –ø–æ–ø—ã—Ç–æ–∫!",
        task: "üî¢ –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≤–µ—Ü –≤ —Å—Ç–∞–¥–µ",
        hint: "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ–≤–µ—Ü, –∫–æ–≥–¥–∞ –æ–Ω–∏ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏",
        joke: "üêë –û–≤—Ü–∞ –±–æ—Ä–º–æ—á–µ—Ç: '–Ø –±—ã –ø–æ—Å—á–∏—Ç–∞–ª–∞ —Å–µ–±—è, –Ω–æ –±–æ—é—Å—å –∑–æ–º–±–∏-–º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–≤!' üßü‚Äç‚ôÇÔ∏è‚ûó",
        fact: "üêë –û–≤—Ü—ã –∏–º–µ—é—Ç –æ—Ç–ª–∏—á–Ω—É—é –ø–∞–º—è—Ç—å –∏ –º–æ–≥—É—Ç –ø–æ–º–Ω–∏—Ç—å –¥–æ 50 –¥—Ä—É–≥–∏—Ö –æ–≤–µ—Ü –∏ –ª—é–¥–µ–π!",
        answer: "41",
        points: 350,
        difficulty: "hard",
        timeBonus: 175
    },
    7: {
        title: "üê¥ –≠–¢–ê–ü 7: –¢–ê–ô–ù–ê –õ–û–®–ê–î–ï–ô",
        description: "–õ–æ—à–∞–¥–µ–π –Ω–∞ —Ñ–µ—Ä–º–µ 12. –ò–∑ –Ω–∏—Ö 1 –¥–µ–≤–æ—á–∫–∞ –∏ –æ–¥–Ω–æ–≥–æ –∑–æ–≤—É—Ç –≤ —á–µ—Å—Ç—å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –≥–æ—Ä—ã –≤ –º–∏—Ä–µ.",
        task: "üîç –ö–∞–∫ –∑–æ–≤—É—Ç –ª–æ—à–∞–¥—å, –Ω–∞–∑–≤–∞–Ω–Ω—É—é –≤ —á–µ—Å—Ç—å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –≥–æ—Ä—ã –≤ –º–∏—Ä–µ?",
        hint: "üí° –≠—Ç–æ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ",
        joke: "üê¥ –õ–æ—à–∞–¥—å —Ä–∂–µ—Ç: '–Ø –Ω–µ –≠–≤–µ—Ä–µ—Å—Ç, –Ω–æ —Ç–æ–∂–µ –≤—ã—Å–æ–∫–∞—è –∏ –∫—Ä–∞—Å–∏–≤–∞—è!' üèîÔ∏èüßü‚Äç‚ôÇÔ∏è",
        fact: "üê¥ –õ–æ—à–∞–¥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Ç—å –∫–∞–∫ —Å—Ç–æ—è, —Ç–∞–∫ –∏ –ª–µ–∂–∞!",
        answer: "–≠–í–ï–†–ï–°–¢",
        points: 400,
        difficulty: "medium",
        timeBonus: 200
    },
    8: {
        title: "üß© –≠–¢–ê–ü 8: –ü–ê–ó–õ –í –î–ï–ù–ù–ò–ö–ï",
        description: "–°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∑–ª –≤ –¥–µ–Ω–Ω–∏–∫–µ —É –ª–æ—à–∞–¥–µ–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        task: "üß© –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∑–ª –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        hint: "üí° –°–ª–æ–≤–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ...—Å–µ–Ω–Ω–∏–∫!",
        joke: "üß© –ü–∞–∑–ª –∂–∞–ª—É–µ—Ç—Å—è: '–°–æ–±–∏—Ä–∞—Ç—å –º–µ–Ω—è - —ç—Ç–æ –Ω–µ –∑–æ–º–±–∏-–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å –ø–µ—Ä–µ–∂–∏—Ç—å!' üßü‚Äç‚ôÇÔ∏èüòÑ",
        fact: "üß© –ü–∞–∑–ª—ã –±—ã–ª–∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω—ã –≤ 1760 –≥–æ–¥—É –∫–∞–∫ —É—á–µ–±–Ω–æ–µ –ø–æ—Å–æ–±–∏–µ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏!",
        answer: "–°–ï–ù–ù–ò–ö",
        points: 450,
        difficulty: "hard",
        timeBonus: 225
    },
    9: {
        title: "üî¶ –≠–¢–ê–ü 9: –ù–û–ß–ù–ê–Ø –û–•–û–¢–ê",
        description: "–° –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º —Ç–µ–º–Ω–æ—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–µ–µ. –° –ø–æ–º–æ—â—å—é —Ñ–æ–Ω–∞—Ä–∏–∫–∞ –Ω–∞–π–¥–∏—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã. –ó–∞—Ç–µ–º –Ω–∞—Ä–∏—Å—É–π –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ —Ñ–µ—Ä–º–µ.",
        task: "üåô –ù–∞–π–¥–∏—Ç–µ 5 —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ç–µ–º–Ω–æ—Ç–µ",
        hint: "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ–Ω–∞—Ä–∏–∫, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–µ—Ç—è—â–∏–µ—Å—è –≤ —Ç–µ–º–Ω–æ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        joke: "üî¶ –§–æ–Ω–∞—Ä–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç: '–Ø –æ—Å–≤–µ—â–∞—é –ø—É—Ç—å, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –∑–æ–º–±–∏-–∫—É—Ä–∏—Ü—É!' üêîüßü‚Äç‚ôÇÔ∏è",
        fact: "ü¶â –ú–Ω–æ–≥–∏–µ –Ω–æ—á–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤–∏–¥—è—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ –≤ 6 —Ä–∞–∑ –ª—É—á—à–µ —á–µ–ª–æ–≤–µ–∫–∞!",
        answer: "5",
        points: 500,
        difficulty: "hard",
        timeBonus: 250
    },
    10: {
        title: "üèÜ –≠–¢–ê–ü 10: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ë–ò–¢–í–ê",
        description: "–§–ò–ù–ê–õ! –ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–µ–π –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø—Ç–∏—Ü –Ω–∞ —Ñ–µ—Ä–º–µ.",
        task: "‚ö° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–µ–π –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø—Ç–∏—Ü",
        hint: "üí° –£—Ç–∫–∏, –≥—É—Å–∏, —Ü–µ—Å–∞—Ä–∫–∏, –ª–µ–±–µ–¥–∏, –∞–ª—å–ø–∞–∫–∏, –ø–æ–Ω–∏, –ª–æ—à–∞–¥–∏, —Å—Ç—Ä–∞—É—Å—ã, –ø–∞–≤–ª–∏–Ω—ã, —Ñ–∞–∑–∞–Ω, —Å–æ–±–∞–∫–∏, –∫—É—Ä–∏—Ü–∞, –æ–≤—Ü–∞, –∫–æ—Ä–æ–≤–∞",
        joke: "üèÜ –§–µ—Ä–º–µ—Ä –∫—Ä–∏—á–∏—Ç: '14 –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∏ –≤—Å–µ —Ö–æ—Ç—è—Ç –µ—Å—Ç—å... –∫—Ä–æ–º–µ –∑–æ–º–±–∏, —Ç–µ —Ö–æ—Ç—è—Ç –º–æ–∑–≥–∏!' üß†üßü‚Äç‚ôÇÔ∏è",
        fact: "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –≥–µ—Ä–æ–µ–º —Ñ–µ—Ä–º—ã –∏ —Å–ø–∞—Å–ª–∏ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö!",
        answer: "14",
        points: 1000,
        difficulty: "legendary",
        timeBonus: 500
    }
};

// ===== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø =====
const achievements = {
    first_blood: { name: "–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å", desc: "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø", icon: "ü©∏" },
    speedrunner: { name: "–°–ø–∏–¥—Ä–∞–Ω–Ω–µ—Ä", desc: "–ü—Ä–æ–π–¥–∏—Ç–µ –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç", icon: "‚ö°" },
    perfectionist: { name: "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç", desc: "–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã –±–µ–∑ –æ—à–∏–±–æ–∫", icon: "‚≠ê" },
    scholar: { name: "–≠—Ä—É–¥–∏—Ç", desc: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏", icon: "üìö" },
    hero: { name: "–ì–µ—Ä–æ–π —Ñ–µ—Ä–º—ã", desc: "–ù–∞–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ 5000 –æ—á–∫–æ–≤", icon: "ü¶∏" },
    explorer: { name: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", desc: "–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã", icon: "üß≠" }
};

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log("üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ó–æ–º–±–∏-–§–µ—Ä–º–∞...");
    initializeGame();
});

function initializeGame() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            tg = window.Telegram.WebApp;
            tg.expand();
            tg.enableClosingConfirmation();
            setupTelegramUser();
            console.log("‚úÖ Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        } else {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞");
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        loadGameProgress();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        simulateLoading();
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        showMainMenu();
    }
}

function setupTelegramUser() {
    if (tg?.initDataUnsafe?.user) {
        const user = tg.initDataUnsafe.user;
        gameState.playerName = user.first_name || '–§–µ—Ä–º–µ—Ä';
        gameState.playerEmoji = 'üë®‚Äçüåæ';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        const playerNameElements = document.querySelectorAll('#player-name, #mini-player-name');
        playerNameElements.forEach(el => {
            if (el) el.textContent = gameState.playerName;
        });
        
        const playerEmojiElements = document.querySelectorAll('#player-emoji, #mini-player-emoji');
        playerEmojiElements.forEach(el => {
            if (el) el.textContent = gameState.playerEmoji;
        });
    }
}

function simulateLoading() {
    let progress = 0;
    const loadingInterval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress >= 100) {
            progress = 100;
            clearInterval(loadingInterval);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                showMainMenu();
            }, 500);
        }
        
        const progressBar = document.getElementById('loading-progress');
        const loadingTip = document.getElementById('loading-tip');
        
        if (progressBar) progressBar.style.width = `${progress}%`;
        
        // –ú–µ–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        if (loadingTip) {
            const tips = [
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é...",
                "–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–æ–º–±–∏-–∂–∏–≤–æ—Ç–Ω—ã—Ö...",
                "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–µ—Ä–º—É...",
                "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
                "–ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é!"
            ];
            const tipIndex = Math.floor(progress / 20);
            if (tipIndex < tips.length) {
                loadingTip.textContent = tips[tipIndex];
            }
        }
    }, 200);
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–†–ê–ù–ê–ú–ò =====
function showScreen(screenId) {
    console.log(`üñ• –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        targetScreen.classList.add('fade-in');
        
        // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => {
            targetScreen.classList.remove('fade-in');
        }, 500);
    }
}

function showMainMenu() {
    updatePlayerStats();
    showScreen('main-menu');
}

function showGameScreen() {
    showScreen('game-screen');
    startGame();
}

function showPauseScreen() {
    if (!gameState.isGameActive) return;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–∞—É–∑–µ
    clearInterval(gameState.timerInterval);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–∞—É–∑—ã
    document.getElementById('pause-stage').textContent = 
        `${gameState.currentStage}/${CONFIG.TOTAL_STAGES}`;
    document.getElementById('pause-score').textContent = gameState.score;
    
    const minutes = Math.floor(gameState.timeLeft / 60);
    const seconds = gameState.timeLeft % 60;
    document.getElementById('pause-time').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    showScreen('pause-screen');
}

function showResultsScreen() {
    calculateFinalResults();
    showScreen('results-screen');
}

// ===== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====
function startGame() {
    console.log("üéÆ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É!");
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ)
    if (!loadGameProgress()) {
        gameState = {
            currentStage: 1,
            score: 0,
            timeLeft: CONFIG.INITIAL_TIME,
            timerInterval: null,
            isGameActive: true,
            hintsUsed: 0,
            skipsUsed: 0,
            lives: CONFIG.MAX_LIVES,
            startTime: new Date(),
            playerName: gameState.playerName,
            playerEmoji: gameState.playerEmoji
        };
    } else {
        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        gameState.isGameActive = true;
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startTimer();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    loadStage(gameState.currentStage);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateGameUI();
}

function loadStage(stageNumber) {
    console.log(`üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ø ${stageNumber}`);
    
    const stage = stages[stageNumber];
    if (!stage) {
        endGame(true);
        return;
    }
    
    const stageContent = document.getElementById('stage-content');
    if (!stageContent) return;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∞–ø–∞ (—É–±—Ä–∞–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, –¥–æ–±–∞–≤–∏–ª–∏ —à—É—Ç–∫—É)
    stageContent.innerHTML = `
        <div class="stage-header">
            <h2 class="stage-title">${stage.title}</h2>
            <p class="stage-description">${stage.description}</p>
        </div>
        
        <div class="stage-task">
            <h3>üéØ –ó–∞–¥–∞—á–∞:</h3>
            <p>${stage.task}</p>
        </div>
        
        ${stage.joke ? `
        <div class="stage-hint">
            <h3>üòÑ –®—É—Ç–∫–∞ –¥–Ω—è:</h3>
            <p>${stage.joke}</p>
        </div>
        ` : ''}
        
        ${stage.fact ? `
        <div class="stage-fact">
            <h3>üß† –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</h3>
            <p>${stage.fact}</p>
        </div>
        ` : ''}
        
        <div class="stage-difficulty">
            <span class="difficulty-badge ${stage.difficulty}">
                –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${getDifficultyText(stage.difficulty)}
            </span>
            <span class="points-value">+${stage.points} –æ—á–∫–æ–≤</span>
        </div>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    document.getElementById('current-stage-display').textContent = 
        `${stageNumber}/${CONFIG.TOTAL_STAGES}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    updateProgressBar();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const answerInput = document.getElementById('answer-input');
    if (answerInput) {
        answerInput.value = '';
    }
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        if (answerInput) answerInput.focus();
    }, 100);
}

function getDifficultyText(difficulty) {
    const difficulties = {
        easy: "–õ—ë–≥–∫–∞—è",
        medium: "–°—Ä–µ–¥–Ω—è—è",
        hard: "–°–ª–æ–∂–Ω–∞—è",
        expert: "–≠–∫—Å–ø–µ—Ä—Ç",
        legendary: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"
    };
    return difficulties[difficulty] || difficulty;
}

function checkAnswer() {
    const input = document.getElementById('answer-input');
    if (!input) return;
    
    const userAnswer = input.value.trim();
    const currentStage = stages[gameState.currentStage];
    
    if (!userAnswer) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!', 'error');
        return;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const normalizedUserAnswer = userAnswer.toUpperCase().replace(/\s+/g, '');
    const normalizedCorrectAnswer = currentStage.answer.toUpperCase().replace(/\s+/g, '');
    
    if (normalizedUserAnswer === normalizedCorrectAnswer) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        handleCorrectAnswer();
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        handleWrongAnswer();
    }
}

function handleCorrectAnswer() {
    const currentStage = stages[gameState.currentStage];
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
    gameState.score += currentStage.points;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
    const timeBonus = Math.floor((gameState.timeLeft / CONFIG.INITIAL_TIME) * currentStage.timeBonus);
    if (timeBonus > 0) {
        gameState.score += timeBonus;
    }
    
    showNotification(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${currentStage.points} –æ—á–∫–æ–≤${timeBonus ? ` +${timeBonus} –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å` : ''}`, 'success');
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    setTimeout(() => {
        gameState.currentStage++;
        
        if (gameState.currentStage <= CONFIG.TOTAL_STAGES) {
            loadStage(gameState.currentStage);
        } else {
            endGame(true); // –ü–æ–±–µ–¥–∞!
        }
        
        updateGameUI();
        saveGameProgress();
    }, 1500);
}

function handleWrongAnswer() {
    gameState.lives--;
    
    if (gameState.lives <= 0) {
        showNotification('üíÄ –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.', 'error');
        setTimeout(() => {
            endGame(false);
        }, 2000);
    } else {
        showNotification(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: ${gameState.lives}`, 'error');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const input = document.getElementById('answer-input');
        if (input) {
            input.value = '';
            input.focus();
        }
    }
    
    updateGameUI();
    saveGameProgress();
}

function useHint() {
    if (gameState.hintsUsed >= CONFIG.MAX_HINTS) {
        showNotification('‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', 'warning');
        return;
    }
    
    const currentStage = stages[gameState.currentStage];
    if (!currentStage.hint) return;
    
    gameState.hintsUsed++;
    showNotification(`üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞! –û—Å—Ç–∞–ª–æ—Å—å: ${CONFIG.MAX_HINTS - gameState.hintsUsed}`, 'success');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    const hintModal = document.getElementById('hint-modal');
    const hintText = document.getElementById('hint-text');
    
    if (hintModal && hintText) {
        hintText.textContent = currentStage.hint;
        hintModal.classList.add('active');
    }
    
    updateGameUI();
}

function skipStage() {
    if (gameState.skipsUsed >= CONFIG.MAX_SKIPS) {
        showNotification('‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', 'warning');
        return;
    }
    
    gameState.skipsUsed++;
    gameState.currentStage++;
    
    showNotification(`‚è© –≠—Ç–∞–ø –ø—Ä–æ–ø—É—â–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${CONFIG.MAX_SKIPS - gameState.skipsUsed}`, 'success');
    
    if (gameState.currentStage <= CONFIG.TOTAL_STAGES) {
        loadStage(gameState.currentStage);
    } else {
        endGame(true);
    }
    
    updateGameUI();
    saveGameProgress();
}

function endGame(isVictory) {
    gameState.isGameActive = false;
    clearInterval(gameState.timerInterval);
    
    if (isVictory) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—É
        const victoryBonus = Math.floor(gameState.timeLeft * 0.5);
        gameState.score += victoryBonus;
        
        showNotification(`üéâ –ü–æ–±–µ–¥–∞! –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è: +${victoryBonus} –æ—á–∫–æ–≤`, 'success');
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        unlockAchievements();
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
        incrementPlayCount();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥
    saveHighScore();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    setTimeout(() => {
        showResultsScreen();
    }, 2000);
}

// ===== –¢–ê–ô–ú–ï–† =====
function startTimer() {
    clearInterval(gameState.timerInterval);
    
    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    updateTimerDisplay();
    
    gameState.timerInterval = setInterval(() => {
        if (gameState.isGameActive && gameState.timeLeft > 0) {
            gameState.timeLeft--;
            updateTimerDisplay();
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if (gameState.timeLeft === 300) { // 5 –º–∏–Ω—É—Ç
                showNotification('‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!', 'warning');
            } else if (gameState.timeLeft === 60) { // 1 –º–∏–Ω—É—Ç–∞
                showNotification('üö® –û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞!', 'error');
            }
        } else if (gameState.timeLeft <= 0) {
            clearInterval(gameState.timerInterval);
            showNotification('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!', 'error');
            endGame(false);
        }
    }, 1000);
}

function updateTimerDisplay() {
    const timerDisplay = document.getElementById('timer-display');
    if (!timerDisplay) return;
    
    const minutes = Math.floor(gameState.timeLeft / 60);
    const seconds = gameState.timeLeft % 60;
    
    timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –º–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (gameState.timeLeft < 300) {
        timerDisplay.style.color = 'var(--danger-color)';
    } else if (gameState.timeLeft < 600) {
        timerDisplay.style.color = 'var(--warning-color)';
    } else {
        timerDisplay.style.color = 'inherit';
    }
}

// ===== –ò–ù–¢–ï–†–§–ï–ô–° =====
function updateGameUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('score-display').textContent = gameState.score;
    document.getElementById('current-stage-display').textContent = 
        `${gameState.currentStage}/${CONFIG.TOTAL_STAGES}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏–∑–Ω–∏
    document.getElementById('lives-count').textContent = gameState.lives;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∏ (—Ç–µ–ø–µ—Ä—å 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫)
    document.getElementById('hints-left').textContent = CONFIG.MAX_HINTS - gameState.hintsUsed;
    document.getElementById('skips-left').textContent = CONFIG.MAX_SKIPS - gameState.skipsUsed;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —ç—Ç–∞–ø–æ–≤
    updateProgressBar();
}

function updateProgressBar() {
    const progress = ((gameState.currentStage - 1) / CONFIG.TOTAL_STAGES) * 100;
    const progressBar = document.getElementById('stage-progress-bar');
    if (progressBar) {
        progressBar.style.width = `${progress}%`;
    }
}

function updatePlayerStats() {
    const bestScore = localStorage.getItem('zombieFarmBestScore') || 0;
    document.getElementById('player-best-score').textContent = bestScore;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    const level = Math.floor(bestScore / 1000) + 1;
    document.getElementById('player-level').textContent = level;
}

// ===== –†–ï–ó–£–õ–¨–¢–ê–¢–´ =====
function calculateFinalResults() {
    const completedStages = gameState.currentStage - 1;
    const completionPercent = Math.round((completedStages / CONFIG.TOTAL_STAGES) * 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    document.getElementById('final-stages').textContent = 
        `${completedStages}/${CONFIG.TOTAL_STAGES}`;
    document.getElementById('final-score').textContent = gameState.score;
    
    const timeSpent = CONFIG.INITIAL_TIME - gameState.timeLeft;
    const minutes = Math.floor(timeSpent / 60);
    const seconds = timeSpent % 60;
    document.getElementById('final-time').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    const rating = calculateRating(gameState.score, completionPercent);
    document.getElementById('final-rating').textContent = rating;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
    const playCount = localStorage.getItem('zombieFarmPlayCount') || 1;
    document.getElementById('play-count').textContent = playCount;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    displayEarnedAchievements();
}

function calculateRating(score, completion) {
    if (completion === 100 && score >= 3500) return "üßô‚Äç‚ôÇÔ∏è –õ–ï–ì–ï–ù–î–ê –§–ï–†–ú–´";
    if (completion === 100 && score >= 3000) return "üèÜ –ú–ê–°–¢–ï–† –°–ü–ê–°–ï–ù–ò–Ø";
    if (completion >= 80 && score >= 2500) return "‚≠ê –ì–ï–†–û–ô –§–ï–†–ú–´";
    if (completion >= 60 && score >= 2000) return "üëç –û–ü–´–¢–ù–´–ô –§–ï–†–ú–ï–†";
    if (completion >= 40 && score >= 1500) return "üå± –ù–ê–ß–ò–ù–ê–Æ–©–ò–ô";
    return "üéØ –ù–û–í–ò–ß–û–ö";
}

function displayEarnedAchievements() {
    const achievementsList = document.getElementById('achievements-list');
    if (!achievementsList) return;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievementsList.innerHTML = `
        <div class="achievement-item">
            <span class="achievement-icon">‚≠ê</span>
            <div class="achievement-info">
                <strong>–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü</strong>
                <p>–ó–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É!</p>
            </div>
        </div>
    `;
}

function incrementPlayCount() {
    let playCount = parseInt(localStorage.getItem('zombieFarmPlayCount') || '0');
    playCount++;
    localStorage.setItem('zombieFarmPlayCount', playCount.toString());
}

// ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
function saveGameProgress() {
    const progress = {
        currentStage: gameState.currentStage,
        score: gameState.score,
        timeLeft: gameState.timeLeft,
        hintsUsed: gameState.hintsUsed,
        skipsUsed: gameState.skipsUsed,
        lives: gameState.lives,
        timestamp: new Date().getTime()
    };
    
    try {
        localStorage.setItem('zombieFarmProgress', JSON.stringify(progress));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
}

function loadGameProgress() {
    try {
        const saved = localStorage.getItem('zombieFarmProgress');
        if (saved) {
            const progress = JSON.parse(saved);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
            if (new Date().getTime() - progress.timestamp < 24 * 60 * 60 * 1000) {
                Object.assign(gameState, progress);
                return true;
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
    return false;
}

function saveHighScore() {
    const currentBest = parseInt(localStorage.getItem('zombieFarmBestScore') || '0');
    if (gameState.score > currentBest) {
        localStorage.setItem('zombieFarmBestScore', gameState.score.toString());
    }
}

function unlockAchievements() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const unlocked = JSON.parse(localStorage.getItem('zombieFarmAchievements') || '[]');
    
    if (!unlocked.includes('explorer')) {
        unlocked.push('explorer');
        showNotification('üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å!', 'success');
    }
    
    if (gameState.score >= 5000 && !unlocked.includes('hero')) {
        unlocked.push('hero');
        showNotification('üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –ì–µ—Ä–æ–π —Ñ–µ—Ä–º—ã!', 'success');
    }
    
    localStorage.setItem('zombieFarmAchievements', JSON.stringify(unlocked));
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
    const notification = document.getElementById('notification');
    const notificationText = document.getElementById('notification-text');
    
    if (notification && notificationText) {
        notificationText.textContent = message;
        notification.className = `notification ${type} show`;
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
    
    console.log(`üí¨ ${type.toUpperCase()}: ${message}`);
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
function setupEventListeners() {
    console.log("üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...");
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    document.getElementById('start-game')?.addEventListener('click', showGameScreen);
    document.getElementById('continue-game')?.addEventListener('click', showGameScreen);
    document.getElementById('how-to-play')?.addEventListener('click', () => {
        showNotification('üìö –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —ç—Ç–∞–ø—ã, –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∏ —Å–ø–∞—Å–∞–π—Ç–µ —Ñ–µ—Ä–º—É!', 'info');
    });
    document.getElementById('leaderboard')?.addEventListener('click', () => {
        showNotification('üèÜ –§—É–Ω–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!', 'info');
    });
    document.getElementById('achievements')?.addEventListener('click', () => {
        showNotification('üéØ –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!', 'info');
    });
    
    // –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    document.getElementById('pause-btn')?.addEventListener('click', showPauseScreen);
    document.getElementById('submit-answer')?.addEventListener('click', checkAnswer);
    document.getElementById('hint-btn')?.addEventListener('click', useHint);
    document.getElementById('skip-btn')?.addEventListener('click', skipStage);
    
    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    const answerInput = document.getElementById('answer-input');
    if (answerInput) {
        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') checkAnswer();
        });
    }
    
    // –≠–∫—Ä–∞–Ω –ø–∞—É–∑—ã
    document.getElementById('resume-game')?.addEventListener('click', () => {
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
        gameState.isGameActive = true;
        startTimer();
        showScreen('game-screen');
    });
    document.getElementById('restart-game')?.addEventListener('click', () => {
        if (confirm('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ?')) {
            localStorage.removeItem('zombieFarmProgress');
            showGameScreen();
        }
    });
    document.getElementById('quit-to-menu')?.addEventListener('click', showMainMenu);
    
    // –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    document.getElementById('play-again')?.addEventListener('click', () => {
        localStorage.removeItem('zombieFarmProgress');
        showGameScreen();
    });
    document.getElementById('share-result')?.addEventListener('click', shareResults);
    document.getElementById('save-result')?.addEventListener('click', () => {
        showNotification('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
    });
    document.getElementById('back-to-menu-from-results')?.addEventListener('click', showMainMenu);
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.querySelector('.modal-close')?.addEventListener('click', () => {
        document.getElementById('hint-modal')?.classList.remove('active');
    });
    document.getElementById('use-hint')?.addEventListener('click', () => {
        document.getElementById('hint-modal')?.classList.remove('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    window.addEventListener('click', (e) => {
        const modals = document.querySelectorAll('.modal.active');
        modals.forEach(modal => {
            if (e.target === modal) {
                modal.classList.remove('active');
            }
        });
    });
    
    // –ë–æ–Ω—É—Å –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
    document.querySelector('.daily-bonus')?.addEventListener('click', () => {
        showNotification('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! +100 –æ—á–∫–æ–≤', 'success');
    });
    
    console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
}

// ===== –®–ï–†–ò–ù–ì =====
function shareResults() {
    const results = {
        score: gameState.score,
        stages: gameState.currentStage - 1,
        total: CONFIG.TOTAL_STAGES
    };
    
    const shareText = `–Ø –ø—Ä–æ—à–µ–ª(–∞) ${results.stages} –∏–∑ ${results.total} —ç—Ç–∞–ø–æ–≤ –≤ –∏–≥—Ä–µ "–ó–æ–º–±–∏-–§–µ—Ä–º–∞" –∏ –Ω–∞–±—Ä–∞–ª(–∞) ${results.score} –æ—á–∫–æ–≤! üßüüèÜ\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!`;
    
    if (navigator.share) {
        navigator.share({
            title: '–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ó–æ–º–±–∏-–§–µ—Ä–º–µ',
            text: shareText
        });
    } else if (tg && tg.share) {
        tg.share(shareText);
    } else {
        navigator.clipboard.writeText(shareText).then(() => {
            showNotification('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        });
    }
}

// ===== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
}

function getRandomTip() {
    const tips = [
        "üí° –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤!",
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —ç–∫–æ–Ω–æ–º–Ω–æ!",
        "üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º!",
        "üí° –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å - –æ–±–¥—É–º–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
        "üí° –ò–∑—É—á–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö!"
    ];
    return tips[Math.floor(Math.random() * tips.length)];
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.showMainMenu = showMainMenu;
window.shareResults = shareResults;

console.log("üéÆ –ò–≥—Ä–∞ –ó–æ–º–±–∏-–§–µ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
