// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand(); // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
tg.enableClosingConfirmation(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    currentStage: 1,
    score: 0,
    timeLeft: 2700, // 45 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    timerInterval: null,
    playerName: '',
    isPaused: false
};

// –î–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–æ–≤
const stages = {
    1: {
        title: "üçé –≠–¢–ê–ü 1: –ó–ê–†–ê–ñ–ï–ù–ò–ï",
        description: "–ë–µ–∑—É–º–Ω—ã–π —É—á–µ–Ω—ã–π –ê–≥—Ä–∏—É—Å –ø—Ä–æ–≤–µ–ª –Ω–µ—É–¥–∞—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç! –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ —Ñ–µ—Ä–º–µ —Å—Ç–∞–ª–∏ –∑–æ–º–±–∏. –ù–∞–π–¥–∏—Ç–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω–æ–µ —è–±–ª–æ–∫–æ —Å –∫–æ–¥–æ–º.",
        task: "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –∏ –Ω–∞–π–¥–∏—Ç–µ —è–±–ª–æ–∫–æ —Å –∫–æ–¥–æ–º",
        hint: "–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–ª–æ–≤–∞ –∏ –≥–æ–¥–∞",
        fact: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –ü–µ—Ä–≤—ã–µ —Ñ–µ—Ä–º—ã –ø–æ—è–≤–∏–ª–∏—Å—å –æ–∫–æ–ª–æ 12 000 –ª–µ—Ç –Ω–∞–∑–∞–¥!",
        answer: "–ó–ê–†–ê–ñ–ï–ù–ò–ï_2024",
        points: 100
    },
    2: {
        title: "ü•ö –≠–¢–ê–ü 2: –¢–ê–ô–ù–ê –ó–û–ú–ë–ò-–Ø–ò–¶",
        description: "–ó–æ–º–±–∏-–∫—É—Ä—ã —Å–Ω–µ—Å–ª–∏ —è–π—Ü–∞ —Å–æ —Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏! –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —è–π—Ü–∞ –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –∫–æ–¥.",
        task: "–ù–∞–π–¥–∏—Ç–µ 5 —è–∏—Ü —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∫—É—Ä—è—Ç–Ω–∏–∫–µ",
        hint: "–°–∏–º–≤–æ–ª—ã: Œ© ‚Ä† ‚àû ¬§ ¬ß",
        fact: "–ö—É—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å –¥–æ 100 —Ä–∞–∑–Ω—ã—Ö –ª–∏—Ü!",
        answer: "Œ©‚Ä†‚àû¬§¬ß",
        points: 150
    },
    3: {
        title: "ü¶¢ –≠–¢–ê–ü 3: –ì–£–°–ò–ù–û–ï –°–ï–õ–§–ò",
        description: "–ü—Ä–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≥—É—Å–µ–π-–æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∫—Ä—É—Ç–æ–µ —Å–µ–ª—Ñ–∏!",
        task: "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ —Å –≥—É—Å—è–º–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
        hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥ #–£—Å–∞–¥—å–±–∞–ú–∞—Ä—å–∏–Ω–æ–ö—Ä—É—Ç—å–ö–≤–µ—Å—Ç–ó–æ–º–±–∏",
        fact: "–ì—É—Å–∏ –æ–±—Ä–∞–∑—É—é—Ç –ø–∞—Ä—ã –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å!",
        answer: "–ì–£–°–ò_2024",
        points: 200
    }
    // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 10 —ç—Ç–∞–ø–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadPlayerInfo();
    showScreen('main-menu');
    startLoadingAnimation();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ
function loadPlayerInfo() {
    const user = tg.initDataUnsafe?.user;
    gameState.playerName = user?.first_name || '–ò–≥—Ä–æ–∫';
    document.getElementById('player-name').textContent = gameState.playerName;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ—Ä–¥ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const bestScore = localStorage.getItem('zombieFarmBestScore') || 0;
    document.getElementById('player-score').textContent = bestScore;
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function startLoadingAnimation() {
    setTimeout(() => {
        hideScreen('loading-screen');
        showScreen('main-menu');
    }, 2000);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active', 'fade-in');
}

function hideScreen(screenId) {
    document.getElementById(screenId).classList.remove('active');
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
    gameState = {
        currentStage: 1,
        score: 0,
        timeLeft: 2700,
        isPaused: false,
        playerName: gameState.playerName
    };
    
    updateGameUI();
    startTimer();
    showScreen('game-screen');
    loadStage(1);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ø–∞
function loadStage(stageNumber) {
    const stage = stages[stageNumber];
    if (!stage) {
        endGame();
        return;
    }
    
    const stageContent = document.getElementById('stage-content');
    stageContent.innerHTML = `
        <div class="stage-title">${stage.title}</div>
        <div class="stage-description">${stage.description}</div>
        <div class="stage-task">
            <strong>–ó–∞–¥–∞—á–∞:</strong> ${stage.task}
        </div>
        <div class="stage-hint">
            <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> ${stage.hint}
        </div>
        <div class="stage-fact">
            <strong>üß† –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</strong> ${stage.fact}
        </div>
    `;
    
    document.getElementById('current-stage').textContent = stageNumber;
    document.getElementById('answer-input').value = '';
    document.getElementById('answer-input').focus();
}

// –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
function startTimer() {
    clearInterval(gameState.timerInterval);
    gameState.timerInterval = setInterval(() => {
        if (!gameState.isPaused) {
            gameState.timeLeft--;
            updateTimerDisplay();
            
            if (gameState.timeLeft <= 0) {
                endGame();
            }
        }
    }, 1000);
}

function updateTimerDisplay() {
    const minutes = Math.floor(gameState.timeLeft / 60);
    const seconds = gameState.timeLeft % 60;
    document.getElementById('timer').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
function checkAnswer() {
    const input = document.getElementById('answer-input');
    const userAnswer = input.value.trim().toUpperCase();
    const currentStage = stages[gameState.currentStage];
    
    if (userAnswer === currentStage.answer) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        gameState.score += currentStage.points;
        gameState.currentStage++;
        updateGameUI();
        
        if (gameState.currentStage <= Object.keys(stages).length) {
            showSuccessMessage();
            setTimeout(() => loadStage(gameState.currentStage), 1500);
        } else {
            endGame();
        }
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        showErrorMessage();
        input.value = '';
        input.focus();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–≥—Ä—ã
function updateGameUI() {
    document.getElementById('score').textContent = gameState.score;
    document.getElementById('current-stage').textContent = gameState.currentStage;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progress = (gameState.currentStage - 1) / Object.keys(stages).length * 100;
    document.querySelector('.progress-fill').style.width = `${progress}%`;
}

// –°–æ–æ–±—â–µ–Ω–∏—è
function showSuccessMessage() {
    const message = document.createElement('div');
    message.className = 'success-message';
    message.textContent = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!';
    message.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #48bb78;
        color: white;
        padding: 20px 30px;
        border-radius: 10px;
        z-index: 1000;
        animation: fadeIn 0.3s ease;
    `;
    document.body.appendChild(message);
    
    setTimeout(() => {
        message.remove();
    }, 1500);
}

function showErrorMessage() {
    const message = document.createElement('div');
    message.className = 'error-message';
    message.textContent = '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    message.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #f56565;
        color: white;
        padding: 20px 30px;
        border-radius: 10px;
        z-index: 1000;
        animation: shake 0.5s ease;
    `;
    document.body.appendChild(message);
    
    setTimeout(() => {
        message.remove();
    }, 1500);
}

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function endGame() {
    clearInterval(gameState.timerInterval);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥
    const bestScore = localStorage.getItem('zombieFarmBestScore') || 0;
    if (gameState.score > bestScore) {
        localStorage.setItem('zombieFarmBestScore', gameState.score);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('final-stages').textContent = gameState.currentStage - 1;
    document.getElementById('final-score').textContent = gameState.score;
    
    const minutes = Math.floor(gameState.timeLeft / 60);
    const seconds = gameState.timeLeft % 60;
    document.getElementById('final-time').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    showScreen('results-screen');
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
function shareResults() {
    const shareText = `–Ø –ø—Ä–æ—à–µ–ª(–∞) ${gameState.currentStage - 1} —ç—Ç–∞–ø–æ–≤ –≤ –∏–≥—Ä–µ "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ó–æ–º–±–∏-–§–µ—Ä–º—ã" –∏ –Ω–∞–±—Ä–∞–ª(–∞) ${gameState.score} –æ—á–∫–æ–≤! üßüüéÆ`;
    
    if (tg.share) {
        tg.share(shareText);
    } else {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        navigator.clipboard.writeText(shareText).then(() => {
            alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö!');
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initGame();
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    document.getElementById('start-game').addEventListener('click', startGame);
    document.getElementById('how-to-play').addEventListener('click', () => {
        alert(`üéÆ –ö–ê–ö –ò–ì–†–ê–¢–¨:\n\n1. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ 13 —ç—Ç–∞–ø–æ–≤ —Å –∑–∞–≥–∞–¥–∫–∞–º–∏\n2. –í–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞\n3. –ò–∑—É—á–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n4. –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`);
    });
    
    // –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    document.getElementById('submit-answer').addEventListener('click', checkAnswer);
    document.getElementById('answer-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') checkAnswer();
    });
    
    // –ü–∞—É–∑–∞
    document.getElementById('pause-btn').addEventListener('click', () => {
        gameState.isPaused = true;
        showScreen('pause-screen');
    });
    
    document.getElementById('resume-game').addEventListener('click', () => {
        gameState.isPaused = false;
        showScreen('game-screen');
    });
    
    document.getElementById('restart-game').addEventListener('click', () => {
        if (confirm('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ?')) {
            startGame();
        }
    });
    
    document.getElementById('quit-game').addEventListener('click', () => {
        if (confirm('–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?')) {
            showScreen('main-menu');
        }
    });
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('play-again').addEventListener('click', startGame);
    document.getElementById('share-result').addEventListener('click', shareResults);
    document.getElementById('back-to-menu').addEventListener('click', () => {
        showScreen('main-menu');
    });
});

// –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ –¥–ª—è –æ—à–∏–±–∫–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes shake {
        0%, 100% { transform: translate(-50%, -50%); }
        25% { transform: translate(-55%, -50%); }
        75% { transform: translate(-45%, -50%); }
    }
`;
document.head.appendChild(style);